package com.huatec.edu.mobileshop.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.huatec.edu.mobileshop.util.MSUtil;
import com.huatec.edu.mobileshop.util.Result;
import com.wordnik.swagger.annotations.ApiOperation;

@Controller
@RequestMapping("/file")
public class FileController {
	//上传图片
	@RequestMapping(value="/upload",method=RequestMethod.POST)
	@ResponseBody
	//@RequestParam:请求参数的数据匹配
	@ApiOperation(value="上传文件")
	public Result upload(@RequestParam(value = "file", required = false) MultipartFile file,
			HttpServletRequest request){
		Result result=new Result();
		String url="http://"+request.getServerName()+":"+request.getLocalPort()
		+request.getContextPath()+"/upload";
		System.out.println("url:"+url);
//		String fileName = file.getOriginalFilename();
		//重命名图片
		String picTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
		String picType=file.getContentType();
		String fileName=MSUtil.md5(picTime);
		if("image/jpeg".equals(picType)){
			fileName=fileName.concat(".jpg");
		}else if("image/png".equals(picType)){
			fileName=fileName.concat(".png");
		}else if("image/gif".equals(picType)){
			fileName=fileName.concat(".gif");
		}else{
			fileName=fileName.concat(".jpg");
		}
		//存放图片的地址
		String savePath = request.getServletContext().getRealPath("/upload");
		System.out.println("路径"+savePath);
		File saveFile = new File(savePath);
		if (!saveFile.exists() && !saveFile.isDirectory()) {
			System.out.println(savePath+"目录不存在，需要创建");
			saveFile.mkdirs();
		}
		File targetFile = new File(savePath, fileName);
		if(!targetFile.exists()){  
			targetFile.mkdirs(); 
		}
		try {
			//复制文件
			file.transferTo(targetFile);
		} catch (IllegalStateException e) {
			e.printStackTrace();
			System.out.println("上传文件失败"+e);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("上传文件失败"+e);
		}
		String filePath=savePath+File.separator+fileName;
		System.out.println("filePath:"+filePath);
		result.setStatus(0);
		result.setMsg("上传文件成功");
		result.setData(filePath);
		return result;
	}
	
	@RequestMapping(value="/upload/ke",method=RequestMethod.GET)
	@ResponseBody
	@ApiOperation(value="富文本上传文件")
	public Result kindEditorUpload(HttpServletRequest request, HttpServletResponse response){
		Result result=new Result();
		//文件保存目录路径
		String savePath = request.getSession().getServletContext().
				getRealPath("/") + "upload/kindeditor/";
		File file1 = new File(savePath);
        if (!file1.exists()) {
             file1.mkdir();// 创建文件根目录
         }

        //文件保存目录URL
        String saveUrl  = request.getContextPath() + "/upload/kindeditor/";
        File file2 = new File(saveUrl);
        if (!file2.exists()) {
             file2.mkdir();// 创建文件根目录
         }
        
        String dirName = request.getParameter("dir");  
        if (dirName == null) {  
            dirName = "image";  
        }
        
		//定义允许上传的文件扩展名
		HashMap extMap = new HashMap();
		extMap.put("image", "gif,jpg,jpeg,png,bmp");
		extMap.put("flash", "swf,flv");
		extMap.put("media", "swf,flv,mp3,wav,wma,wmv,mid,avi,mpg,asf,rm,rmvb");
		extMap.put("file", "doc,docx,xls,xlsx,ppt,htm,html,txt,zip,rar,gz,bz2");
		
		if(!extMap.containsKey(dirName)){  
			result.setStatus(1);
            result.setMsg("目录名不正确");
            return result;  
        }  
        //创建文件夹  
        savePath += dirName + "/";  
        saveUrl += dirName + "/";  
        File saveDirFile = new File(savePath);
        if (!saveDirFile.exists()) {  
            saveDirFile.mkdirs();  
        }
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");  
        String ymd = sdf.format(new Date());  
        savePath += ymd + "/";  
        saveUrl += ymd + "/";  
        File dirFile = new File(savePath);  
        if (!dirFile.exists()) {  
            dirFile.mkdirs();  
        }
        
		//最大文件大小
		long maxSize = 10000000;
		response.setContentType("text/html; charset=UTF-8");
		//判断是否选择文件
		if(!ServletFileUpload.isMultipartContent(request)){
            result.setStatus(1);
            result.setMsg("请选择文件");
            return result;
        }
//		UploadFile uploadFile = new UploadFile(request);
		FileItemFactory factory = new DiskFileItemFactory();
		ServletFileUpload upload = new ServletFileUpload(factory);
		upload.setHeaderEncoding("UTF-8");
		List<?> items = null;
		try {
			items = upload.parseRequest(request);
		} catch (FileUploadException e) {
			e.printStackTrace();
			System.out.println("接收文件异常"+e);
		}
		Iterator<?> itr = items.iterator();
		while (itr.hasNext()) {
			FileItem item = (FileItem) itr.next();
			String fileName = item.getName();
			if (!item.isFormField()) {
				//检查文件大小  
                if(item.getSize() > maxSize){
                	result.setStatus(1);
                	result.setMsg("上传文件大小超过限制");
                	return result;
                }
                //检查扩展名  
                String fileExt = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();
                if(!Arrays.<String>asList(((String) extMap.get(dirName)).split(",")).
                		contains(fileExt)){
                	result.setStatus(1);
                	result.setMsg("上传文件扩展名是不允许的扩展名");
                	return result;
                }
                
                SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");  
                String newFileName = df.format(new Date()) + "_" + 
                new Random().nextInt(1000) + "." + fileExt;  
                try{  
                    File uploadedFile = new File(savePath, newFileName);  
                    item.write(uploadedFile);  
                }catch(Exception e){  
                    System.out.println("上传文件失败"+e);  
                }
                result.setStatus(0);
                result.setMsg("上传文件成功");
                result.setData(saveUrl+newFileName);
                return result;
			}
		}
		return null;
	}
	
}
