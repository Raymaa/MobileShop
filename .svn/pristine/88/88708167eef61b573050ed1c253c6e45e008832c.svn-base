
$(document).ready(function(){

    //用于给Model的relRoot构建
    var path = "http://localhost:8080/MobileShop";
	var urlRoot = path+"/goods/";     
  
    var  GoodsItem = Backbone.Model.extend({
    	 urlRoot:urlRoot,
		 idAttribute:"goodsId"  //将goodsId设置为键值属性
	  });
     

     //用于给Collection的URL构建
	 var pageId = 1;
     var path = "http://localhost:8080/MobileShop";
	 var url = path+"/goods/enable/page/"+pageId;
     
	var  OnLineGoodsList = Backbone.Collection.extend({
		model: GoodsItem,
		url:url,  //可以在定义集合类时传入url
	    parse : function(response){
	        return response.data;
	      }
	});
	
   //实例化Collection
    var  onLineGoodsList = new OnLineGoodsList();
    
  //调用GET方式从服务器提取数据
  onLineGoodsList.fetch({
	    reset:true, 
	    url:url,//也可以在fetch时重构url
	    success: function(collection, response) {
         }
    });

  //View定义
     var GoodsItemView = Backbone.View.extend({
    	 tagName : 'tr',       //设置生成的DOM元素，这里为表格中的一行
	     className : 'item',   //设置class属性
	     itemTemplate : _.template($("#onLineTemplate").html()),//设置模板
	     events: {
   	      "click a.offLine": "offGoods",
   	      "click a.edit": "editGoods",
   	      "click a.delete": "deleteGoods"
   	    },
	     initialize:function(){
             this.render();
	     },
    	 render : function(){
    		    /*console.log("进入单个视图");
    		    console.log(this.model.toJSON());*/
	       		this.$el.html(this.itemTemplate(this.model.toJSON()));
	       		return this;  
	       	},
	       	offGoods :function(e){//下架商品 2017.1.4
		       	   //从当前model中去 获取goodsId
	       		    var goodsId = this.model.get("goods_id");
  
	       		   //new一个GoodsItem
	       		   var goods = new GoodsItem();
	       		   
	       		   //重构url
	       		   var path = "http://localhost:8080/MobileShop";
	       		   var urlRoot = path+"/backbone/goods/enable/";  
	       		   goods.urlRoot = urlRoot ;
	       		   
	       		   //给goodId赋值，修改mktEnable为1
		           goods.set({goodsId:goodsId,mktEnable:"1"}); 
		           goods.save(); //因为goodsId是键值，并且不为空，所以save会以PUT方式请求数据
		           
		           //从collection中移除该model
		           onLineGoodsList.remove(this.model);
		       	},
		    	editGoods :function(){//编辑商品
			       	//从当前model中去 获取goodsId
	       		    var goodsId = this.model.get("goods_id");
	       		    //显示修改页面
	       		    //将当前Model的内容传输给修改页面的模板，并显示出来
	       		    //获取修改之后的内容，new一个model，把值放进去，包括goodsId
	       		    //save一下，这时就会通过goodsId去修改商品
	       		    //this.model给set一下，会触发change事件，是否要给change事件加一个监听
		       	},
		       	deleteGoods :function(){//删除商品
		       	 //从当前model中去 获取goodsId
	       		  var goodsId = this.model.get("goods_id");
		       	   
	       		   //重新new一个GoodsItem，给它值
	       		   var goods = new GoodsItem();

		           goods.set({goodsId:goodsId}); 
		           goods.destroy(); //DELETE方式
		           
		           //从collection中移除该model
		           onLineGoodsList.remove(this.model);
		       	}
     });
     
     //创建一个显示Collection对象的视图类
     var GoodsListView = Backbone.View.extend({
    	    el : '#onlineGoodsList',
    	    //事件绑定
	       	initialize: function() {
	       		this.listenTo(onLineGoodsList,'all',this.render);//GoodsListView视图监听collection对象onLineGoodsList的all事件，render进行渲染
	       	},
	       	render :function(){
	       		this.$el.empty();//清空
	       		
	       		for(var i=0;i < onLineGoodsList.models.length;i++){
	       			var view = new GoodsItemView ({model :onLineGoodsList.models[i] });  
	       			this.$el.append(view.$el);
	       		}
	       	}
	       	
	       });
   
     //实例化View，页面显示出数据
   var goodsListView = new GoodsListView;
   goodsListView.render();
  

   
});